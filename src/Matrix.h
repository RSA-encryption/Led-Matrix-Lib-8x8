#ifndef _matrix_included
#define _matrix_included
#define PART_DELAY _delay / 8
#define S_BOUND 256
#define A_ROWS 8
#define A_COLUMNS 27
#define FREQ 967 //967 should be 60hz irl but I am not really sure if the equation I used is correct.

#include <Arduino.h>

class Matrix
{
  private:
    int _data;
    int _latch;
    int _clock;
    byte _points[A_COLUMNS] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
    byte _alpha[A_COLUMNS][A_ROWS] = {
      {B00000000, B00111100, B01100110, B01100110, B01111110, B01100110, B01100110, B01100110},
      {B01111000, B01001000, B01001000, B01110000, B01001000, B01000100, B01000100, B01111100},
      {B00000000, B00011110, B00100000, B01000000, B01000000, B01000000, B00100000, B00011110},
      {B00000000, B00111000, B00100100, B00100010, B00100010, B00100100, B00111000, B00000000},
      {B00000000, B00111100, B00100000, B00111000, B00100000, B00100000, B00111100, B00000000},
      {B00000000, B00111100, B00100000, B00111000, B00100000, B00100000, B00100000, B00000000},
      {B00000000, B00111110, B00100000, B00100000, B00101110, B00100010, B00111110, B00000000},
      {B00000000, B00100100, B00100100, B00111100, B00100100, B00100100, B00100100, B00000000},
      {B00000000, B00111000, B00010000, B00010000, B00010000, B00010000, B00111000, B00000000},
      {B00000000, B00011100, B00001000, B00001000, B00001000, B00101000, B00111000, B00000000},
      {B00000000, B00100100, B00101000, B00110000, B00101000, B00100100, B00100100, B00000000},
      {B00000000, B00100000, B00100000, B00100000, B00100000, B00100000, B00111100, B00000000},
      {B00000000, B00000000, B01000100, B10101010, B10010010, B10000010, B10000010, B00000000},
      {B00000000, B00100010, B00110010, B00101010, B00100110, B00100010, B00000000, B00000000},
      {B00000000, B00111100, B01000010, B01000010, B01000010, B01000010, B00111100, B00000000},
      {B00000000, B00111000, B00100100, B00100100, B00111000, B00100000, B00100000, B00000000},
      {B00000000, B00111100, B01000010, B01000010, B01000010, B01000110, B00111110, B00000001},
      {B00000000, B00111000, B00100100, B00100100, B00111000, B00100100, B00100100, B00000000},
      {B00000000, B00111100, B00100000, B00111100, B00000100, B00000100, B00111100, B00000000},
      {B00000000, B01111100, B00010000, B00010000, B00010000, B00010000, B00010000, B00000000},
      {B00000000, B01000010, B01000010, B01000010, B01000010, B00100100, B00011000, B00000000},
      {B00000000, B00100010, B00100010, B00100010, B00010100, B00010100, B00001000, B00000000},
      {B00000000, B10000010, B10010010, B01010100, B01010100, B00101000, B00000000, B00000000},
      {B00000000, B01000010, B00100100, B00011000, B00011000, B00100100, B01000010, B00000000},
      {B00000000, B01000100, B00101000, B00010000, B00010000, B00010000, B00010000, B00000000},
      {B00000000, B00111100, B00000100, B00001000, B00010000, B00100000, B00111100, B00000000},
      {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}
    };
    void RegUpdate(byte x, byte y);
    void RegUpdateAll(int x);
    int DumpIndex(char c);
  public:
    int _delay = 2500;
    char _string[S_BOUND];
    Matrix(const int latch, const int data, const int clock);
    void DrawText();
    void Attach();
    bool IsBusy();
    void Interrupt();
    void SetString(char *s);
    void DrawMatrix(byte *arr);
    void Shift(byte *o, byte *f, byte *s, int c);
    void SetPoint(int x, int y);
    void RemovePoint(int x, int y);
    void DrawPoints();
};
#endif